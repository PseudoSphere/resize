{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","raw","display","src","default","scrollTop","scrollLeft","resizedImage","width","height","physicalDistance","scale","start","location","updated","message","end","chooseStart","zoomFactor","download","pdfPoints","event","file","target","files","Image","imageURL","URL","createObjectURL","setState","_this2","alert","xPixels","yPixels","paperDistance","Math","sqrt","pow","fullWidth","fullHeight","margin","pdf","pdfkit","size","stream","pipe","blobStream","canvas","document","createElement","image","getContext","drawImage","data","toDataURL","on","url","toBlobURL","value","focus","tagName","el","lx","ly","offsetLeft","offsetTop","offsetParent","clickedX","pageX","clickedY","pageY","_redrawDisplay","drawLine","context","lineWidth","_drawPoint","beginPath","startLocation","endLocation","moveTo","lineTo","stroke","arc","PI","fill","_this3","react_default","a","className","type","id","style","onChange","updateDisplayImage","htmlFor","accept","updatePhysical","updateScale","onClick","resize","href","disabled","round","startActive","endActive","updateDisplay","onScroll","trackScroll","alt","React","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9dacbb36.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport pdfkit from 'pdfkit/js/pdfkit.standalone.js';\nimport blobStream from 'blob-stream';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      raw: null,\n      display: {\n        src: null,\n        default: true\n      },\n      scrollTop: 0,\n      scrollLeft: 0,\n      resizedImage: {\n        src: null,\n        width: 0,\n        height: 0\n      },\n      physicalDistance: '',\n      scale: 4,\n      start: {\n        location: [0,0],\n        updated: false,\n        message: \"Select Start\"\n      },\n      end: {\n        location: [0,0],\n        updated: false,\n        message: \"Select End\"\n      },\n      chooseStart: true,\n      zoomFactor: 0,\n      download: false\n    }\n    this.pdfPoints = 72;\n  }\n\n  // in charge of choosing initial image\n  updateDisplayImage(event) {\n    const file = event.target.files[0];\n    if(!file) {\n      return;\n    }\n\n    const raw = new Image();\n    const imageURL = URL.createObjectURL(file);\n    raw.src = imageURL;\n    this.setState({\n      raw,\n      display: {\n        src: imageURL,\n        default: false\n      },\n      start: {\n        location: [0,0],\n        updated: false,\n        message: \"Select Start\"\n      },\n      end: {\n        location: [0,0],\n        updated: false,\n        message: \"Select End\"\n      },\n      download: false,\n      chooseStart: true\n    })\n  }\n\n  // resizes the image if prereqs are met\n  resize() {\n    if(this.state.display.default) {\n      alert(\"You must select an image first\");\n      return;\n    }\n    if(!this.state.start.updated) {\n      alert(\"You must select a starting point\");\n      return;\n    }\n    if(!this.state.end.updated) {\n      alert(\"You must select an ending point\");\n      return;\n    }\n    if(this.state.physicalDistance <= 0) {\n      alert(\"You must set physical distance\");\n      return;\n    }\n\n    /* \n      Calculate Scale Factor\n    */\n    // clac length of selection in pixels\n    const xPixels = this.state.start.location[0] - this.state.end.location[0];\n    const yPixels = this.state.start.location[1] - this.state.end.location[1];\n    let pixels = Math.sqrt(Math.pow(xPixels, 2) + Math.pow(yPixels, 2));\n\n    // convert size to pdf points (72 per inch)\n    let paperDistance = pixels/this.pdfPoints;\n\n    // calc scale\n    let zoomFactor = this.state.physicalDistance/paperDistance/this.state.scale;\n    let fullWidth = this.state.raw.width * zoomFactor;\n    let fullHeight = this.state.raw.height * zoomFactor;\n    let margin = 2 * this.pdfPoints\n\n    // create image/file\n    let pdf = new pdfkit({\n      //layout,\n      size: [fullWidth + margin, fullHeight + margin]\n    });\n    const stream = pdf.pipe(blobStream());\n\n    let canvas = document.createElement('canvas');\n    let image = this.state.raw\n    canvas.width = image.width;\n    canvas.height = image.height;\n    canvas.getContext(\"2d\").drawImage(image, 0, 0, canvas.width, canvas.height);\n    let data = canvas.toDataURL();\n  \n    // fill pdf\n    pdf.image(data, margin/2, margin/2, {width: fullWidth});\n\n    // prepare for save\n    pdf.end();\n    stream.on(\"finish\", () => {\n      // get a blob URL for download\n      const url = stream.toBlobURL(\"application/pdf\");\n      \n      this.setState({\n        resizedImage: {\n          src: url,\n          width: fullWidth,\n          height: fullHeight\n        },\n        zoomFactor,\n        download: true\n      })\n    });\n  }\n\n  /* \n    input trackers \n  */\n  updatePhysical(event) {\n    this.setState({\n      physicalDistance: event.target.value,\n      download: false\n    });\n  }\n\n  updateScale(event) {\n    this.setState({\n      scale: event.target.value,\n      download: false\n    })\n  }\n\n\n  // sets the next chosen point to be the \"start\" of the line\n  startActive() {\n    this.setState({\n      chooseStart: true\n    });\n  }\n\n  // sets the next chosen point to be the \"end\" of the line\n  endActive() {\n    this.setState({\n      chooseStart: false\n    });\n  }\n\n  // updates the selections on the display image\n  updateDisplay(event) {\n    let focus = event.target;\n    if(focus.tagName !== 'IMG') {\n      return;\n    }\n    \n    // get distance of point relative to image\n    let el = focus;\n    for (var lx=0, ly=0;\n          el != null;\n          lx += el.offsetLeft, ly += el.offsetTop, el = el.offsetParent);\n    let clickedX = event.pageX - lx + this.state.scrollLeft;\n    let clickedY = event.pageY - ly + this.state.scrollTop;\n    \n    // update state and redraw\n    if(this.state.chooseStart) {\n      // first time selection will auto move to select end\n      if(!this.state.start.updated) {\n        this.setState({\n          chooseStart: false\n        });\n      }\n      this.setState({\n        start: {\n          message: \"Re-select Start\",\n          updated: true,\n          location: [clickedX, clickedY]\n        },\n      }, this._redrawDisplay)\n    } else {\n      this.setState({\n        end: {\n          message: \"Re-select End\",\n          updated: true,\n          location: [clickedX, clickedY]\n        },\n      }, this._redrawDisplay)\n    }\n  }\n  // update the display based on current(updated) state\n  _redrawDisplay() {\n    let drawLine = true;\n    // set up canvas\n    let canvas = document.createElement('canvas');\n    let image = this.state.raw;\n    canvas.width = image.width;\n    canvas.height = image.height;\n    let context = canvas.getContext(\"2d\");\n    context.lineWidth = 5;\n    context.drawImage(image, 0, 0, canvas.width, canvas.height);\n\n    // draw start\n    if(this.state.start.updated) {\n      this._drawPoint(canvas, this.state.start.location);\n    } else {\n      drawLine = false;\n    }\n\n    // draw end\n    if(this.state.end.updated) {\n      this._drawPoint(canvas, this.state.end.location);\n    } else {\n      drawLine = false;\n    }\n\n    // draw line\n    if(drawLine) {\n      context.beginPath();\n      let startLocation = this.state.start.location;\n      let endLocation = this.state.end.location;\n      context.moveTo(startLocation[0], startLocation[1]);\n      context.lineTo(endLocation[0], endLocation[1]);\n      context.stroke();\n    }\n\n    // update state\n    this.setState({\n      display: {\n        src: canvas.toDataURL(\"image/jpeg\"),\n        default: false\n      },\n      download: false\n    });\n  }\n  // for uniform poing representations\n  _drawPoint(canvas, location) {\n    let context = canvas.getContext(\"2d\");\n    // Inner\n    context.beginPath();\n    context.arc(location[0], location[1], 5, 0, 2*Math.PI);\n    context.fill();\n\n    // Outer\n    context.beginPath();\n    context.arc(location[0], location[1], 20, 0, 2*Math.PI);\n    context.stroke();\n  }\n\n  // keep track of the scroll modification for display updates\n  trackScroll(event) {\n    this.setState({\n      scrollTop: event.target.scrollTop,\n      scrollLeft: event.target.scrollLeft\n    })\n  }\n\n  render() {\n    const decimals = 100; //2 decimal places\n    return (\n      <div className=\"App\">\n        <div className=\"settings\">\n          <div>\n            <input type=\"file\" id=\"file\" style={{display: 'none'}} onChange={(event) => this.updateDisplayImage(event)}/>\n            <label htmlFor=\"file\" className=\"fancy-blue-button\" accept=\"image/*\">Select Image</label>\n          </div>\n          <div>Physical Distance (ft): <input value={this.state.physicalDistance} onChange={event => this.updatePhysical(event)}/></div>\n          <div>Desired Scale (Feet Per Inch): <input value={this.state.scale} onChange={event => this.updateScale(event)}/></div>\n          <div><button className=\"fancy-blue-button\" onClick={() => this.resize()}>Resize</button></div>\n          <div><a href={this.state.resizedImage.src} download>\n            <button className=\"fancy-blue-button\" disabled={!this.state.download}>Download</button>\n          </a></div>\n          {this.state.download && <div>\n          <p>Zoom Factor: {Math.round(this.state.zoomFactor * decimals)/decimals}</p>\n          <p>Size on Paper: \n            {Math.round(this.state.resizedImage.width / this.pdfPoints * decimals)/decimals}\" x \n            {Math.round(this.state.resizedImage.height / this.pdfPoints * decimals)/decimals}\"</p>\n          </div>}\n        </div>\n          \n        <div className=\"display\">\n          <div>\n            <button className=\"fancy-blue-button\" onClick={() => this.startActive()}>{this.state.start.message}</button>\n            <button className=\"fancy-blue-button\" onClick={() => this.endActive()}>{this.state.end.message}</button>\n          </div>\n          <div className=\"giant-image\" onClick={event => this.updateDisplay(event)} onScroll={event => this.trackScroll(event)}><img src={this.state.display.src} alt=\"\"/></div>\n          \n        </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}